"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/BentoGrid.tsx":
/*!**************************************!*\
  !*** ./src/components/BentoGrid.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BentoGrid: function() { return /* binding */ BentoGrid; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! framer-motion */ \"(app-pages-browser)/./node_modules/framer-motion/dist/es/render/dom/motion.mjs\");\n/* harmony import */ var _store_useStore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/useStore */ \"(app-pages-browser)/./src/store/useStore.ts\");\n/* harmony import */ var _BentoCardComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BentoCardComponent */ \"(app-pages-browser)/./src/components/BentoCardComponent.tsx\");\n/* harmony import */ var _barrel_optimize_names_Crown_Plus_lucide_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=Crown,Plus!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/plus.js\");\n/* harmony import */ var _barrel_optimize_names_Crown_Plus_lucide_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=Crown,Plus!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/crown.js\");\n/* harmony import */ var react_grid_layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-grid-layout */ \"(app-pages-browser)/./node_modules/react-grid-layout/index.js\");\n/* harmony import */ var react_grid_layout__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_grid_layout__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var react_grid_layout_css_styles_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-grid-layout/css/styles.css */ \"(app-pages-browser)/./node_modules/react-grid-layout/css/styles.css\");\n/* harmony import */ var _ResizableCard__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ResizableCard */ \"(app-pages-browser)/./src/components/ResizableCard.tsx\");\n/* __next_internal_client_entry_do_not_use__ BentoGrid,default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\nconst BentoGrid = (param)=>{\n    let { cards, isPreview = false, onCardClick, className = \"\" } = param;\n    _s();\n    const { currentLayout, updateCard, addCard, userPlan } = (0,_store_useStore__WEBPACK_IMPORTED_MODULE_2__.useStore)();\n    const [gridDimensions, setGridDimensions] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        width: 0,\n        height: 0\n    });\n    const [cellSize, setCellSize] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(100);\n    const [hoveredCell, setHoveredCell] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const gridRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [mounted, setMounted] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isLayoutChanging, setIsLayoutChanging] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [addingCard, setAddingCard] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [emptyGridCells, setEmptyGridCells] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // Calculate grid dimensions on mount and resize\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        setMounted(true);\n        const calculateDimensions = ()=>{\n            if (gridRef.current) {\n                const rect = gridRef.current.getBoundingClientRect();\n                setGridDimensions({\n                    width: rect.width,\n                    height: rect.height\n                });\n                // Calculate cell size based on grid width and columns\n                const cols = getGridColumns();\n                const gapSize = getGap();\n                const totalGapWidth = gapSize * (cols - 1);\n                const availableWidth = rect.width - totalGapWidth;\n                const calculatedCellSize = Math.floor(availableWidth / cols);\n                setCellSize(calculatedCellSize);\n            }\n        };\n        calculateDimensions();\n        const resizeObserver = new ResizeObserver(calculateDimensions);\n        if (gridRef.current) {\n            resizeObserver.observe(gridRef.current);\n        }\n        window.addEventListener(\"resize\", calculateDimensions);\n        return ()=>{\n            resizeObserver.disconnect();\n            window.removeEventListener(\"resize\", calculateDimensions);\n        };\n    }, [\n        currentLayout\n    ]);\n    // Determine number of columns based on layout\n    const getGridColumns = ()=>{\n        switch(currentLayout){\n            case \"mobile\":\n                return 2;\n            case \"tablet\":\n                return 4;\n            case \"desktop\":\n            default:\n                return 12;\n        }\n    };\n    // Determine number of rows based on layout - FIXED TO 6 ROWS MAX\n    const getGridRows = ()=>{\n        switch(currentLayout){\n            case \"mobile\":\n                return 6;\n            case \"tablet\":\n                return 6;\n            case \"desktop\":\n            default:\n                return 6;\n        }\n    };\n    // Determine gap based on layout\n    const getGap = ()=>{\n        switch(currentLayout){\n            case \"mobile\":\n                return 8;\n            case \"tablet\":\n                return 12;\n            case \"desktop\":\n            default:\n                return 16;\n        }\n    };\n    // Convert card size to column and row span - FIXED LOGIC\n    const getCardSize = (card)=>{\n        const [colSpan, rowSpan] = card.size.split(\"x\").map(Number);\n        // Adapt size based on layout\n        if (currentLayout === \"mobile\") {\n            // On mobile, limit to 2 columns max\n            const adaptedColSpan = Math.min(colSpan, 2);\n            return {\n                colSpan: adaptedColSpan,\n                rowSpan\n            };\n        } else if (currentLayout === \"tablet\") {\n            // On tablet, limit to 4 columns max\n            const adaptedColSpan = Math.min(colSpan, 4);\n            return {\n                colSpan: adaptedColSpan,\n                rowSpan\n            };\n        } else {\n            // CORRECTION: On desktop, use the actual size from card.size, don't modify it\n            return {\n                colSpan: Math.min(colSpan, 12),\n                rowSpan: Math.min(rowSpan, 6)\n            };\n        }\n    };\n    // Check for collisions\n    const hasCollision = (cardId, col, row, colSpan, rowSpan)=>{\n        // Check grid boundaries\n        if (col < 0 || row < 0 || col + colSpan > getGridColumns() || row + rowSpan > getGridRows()) {\n            return true;\n        }\n        for (const card of cards){\n            if (card.id === cardId || !card.gridPosition) continue;\n            const { colSpan: cardColSpan, rowSpan: cardRowSpan } = getCardSize(card);\n            // Check if rectangles overlap\n            const overlap = !(col >= card.gridPosition.col + cardColSpan || // Right\n            col + colSpan <= card.gridPosition.col || // Left\n            row >= card.gridPosition.row + cardRowSpan || // Bottom\n            row + rowSpan <= card.gridPosition.row // Top\n            );\n            if (overlap) return true;\n        }\n        return false;\n    };\n    // Intelligent resize function\n    const handleIntelligentResize = (cardId, newCols, newRows)=>{\n        const card = cards.find((c)=>c.id === cardId);\n        if (!card || !card.gridPosition) return false;\n        const currentCol = card.gridPosition.col;\n        const currentRow = card.gridPosition.row;\n        // Check grid limits\n        if (currentCol + newCols > getGridColumns() || currentRow + newRows > getGridRows()) {\n            return false;\n        }\n        // Check for collisions\n        if (hasCollision(cardId, currentCol, currentRow, newCols, newRows)) {\n            return false;\n        }\n        return true;\n    };\n    // Convert cards to React-Grid-Layout format\n    const getLayoutItems = ()=>{\n        return cards.map((card)=>{\n            if (!card.gridPosition) return null;\n            const { colSpan, rowSpan } = getCardSize(card);\n            return {\n                i: card.id,\n                x: card.gridPosition.col,\n                y: card.gridPosition.row,\n                w: colSpan,\n                h: rowSpan,\n                static: isPreview,\n                maxW: getGridColumns(),\n                maxH: getGridRows()\n            };\n        }).filter(Boolean);\n    };\n    // Handle layout change from React-Grid-Layout\n    const handleLayoutChange = (layout)=>{\n        if (isPreview || isLayoutChanging) return;\n        // Set a flag to prevent multiple updates\n        setIsLayoutChanging(true);\n        // Process layout changes one by one to prevent cascading updates\n        const updates = layout.map((item)=>{\n            const card = cards.find((c)=>c.id === item.i);\n            if (card && card.gridPosition) {\n                if (card.gridPosition.col !== item.x || card.gridPosition.row !== item.y) {\n                    return {\n                        id: card.id,\n                        x: item.x,\n                        y: item.y\n                    };\n                }\n            }\n            return null;\n        }).filter(Boolean);\n        // Apply updates sequentially\n        if (updates.length > 0) {\n            // Only update the card that was actually moved by the user\n            const update = updates[0];\n            if (update) {\n                updateCard(update.id, {\n                    gridPosition: {\n                        col: update.x,\n                        row: update.y\n                    }\n                });\n            }\n        }\n        // Reset the flag after a short delay\n        setTimeout(()=>{\n            setIsLayoutChanging(false);\n        }, 100);\n    };\n    // Check if a cell is free (not occupied by any card)\n    const isCellFree = (row, col)=>{\n        if (row >= getGridRows() || col >= getGridColumns()) return false;\n        // Check if any card occupies this cell\n        for (const card of cards){\n            if (!card.gridPosition) continue;\n            const { colSpan, rowSpan } = getCardSize(card);\n            const cardStartCol = card.gridPosition.col;\n            const cardEndCol = cardStartCol + colSpan - 1;\n            const cardStartRow = card.gridPosition.row;\n            const cardEndRow = cardStartRow + rowSpan - 1;\n            if (col >= cardStartCol && col <= cardEndCol && row >= cardStartRow && row <= cardEndRow) {\n                return false;\n            }\n        }\n        return true;\n    };\n    // Function to add a new card at a specific position - DEBUG\n    const handleAddCard = async (row, col)=>{\n        // DEBUG: Afficher les valeurs actuelles\n        console.log(\"\\uD83D\\uDD0D DEBUG handleAddCard:\");\n        console.log(\"currentLayout:\", currentLayout);\n        console.log(\"getGridColumns():\", getGridColumns());\n        console.log(\"Position demand\\xe9e:\", {\n            row,\n            col\n        });\n        // Check if the cell is free\n        if (!isCellFree(row, col) || addingCard) return;\n        setAddingCard(true);\n        try {\n            // CORRECTION: Force la bonne taille pour desktop\n            let cardSize;\n            switch(currentLayout){\n                case \"mobile\":\n                    cardSize = \"1x1\";\n                    break;\n                case \"tablet\":\n                    cardSize = \"1x1\";\n                    break;\n                case \"desktop\":\n                default:\n                    cardSize = \"2x2\"; // Forcer 2x2 pour desktop\n                    break;\n            }\n            const newCard = {\n                title: \"Nouvelle Carte\",\n                description: \"Cliquez pour \\xe9diter cette carte\",\n                url: \"\",\n                backgroundColor: \"#6366f1\",\n                textColor: \"#ffffff\",\n                size: cardSize,\n                gridPosition: {\n                    col,\n                    row\n                }\n            };\n            const result = await addCard(newCard);\n            if (!result.success) {\n                alert(result.error);\n            } else {\n                // Open editor for the new card\n                onCardClick && onCardClick(result.cardId || \"\");\n            }\n        } catch (error) {\n            console.error(\"Error adding card:\", error);\n        } finally{\n            setAddingCard(false);\n        }\n    };\n    // Check plan limits\n    const canAddMoreCards = ()=>{\n        if (userPlan === \"free\") return cards.length < 3;\n        if (userPlan === \"starter\") return cards.length < 25;\n        return true; // Pro plan = unlimited\n    };\n    // Calculate grid height based on content\n    const gridHeight = getGridRows() * cellSize + (getGridRows() - 1) * getGap();\n    // Calculate all empty cells for the grid - FIXED\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const maxCols = getGridColumns();\n        const maxRows = getGridRows();\n        const emptyCells = [];\n        // Check each cell in the grid\n        for(let row = 0; row < maxRows; row++){\n            for(let col = 0; col < maxCols; col++){\n                if (isCellFree(row, col)) {\n                    // CORRECTION: Logique plus simple et cohérente\n                    if (currentLayout === \"desktop\") {\n                        // Pour desktop, vérifier l'espace pour une carte 2x2\n                        let hasSpace = true;\n                        // Vérifier si on a assez d'espace (2x2)\n                        if (col + 2 > maxCols || row + 2 > maxRows) {\n                            hasSpace = false;\n                        } else {\n                            // Vérifier que toutes les cellules nécessaires sont libres\n                            for(let r = row; r < row + 2; r++){\n                                for(let c = col; c < col + 2; c++){\n                                    if (!isCellFree(r, c)) {\n                                        hasSpace = false;\n                                        break;\n                                    }\n                                }\n                                if (!hasSpace) break;\n                            }\n                        }\n                        if (hasSpace) {\n                            emptyCells.push({\n                                row,\n                                col\n                            });\n                        }\n                    } else {\n                        // Pour mobile et tablet, ajouter directement\n                        emptyCells.push({\n                            row,\n                            col\n                        });\n                    }\n                }\n            }\n        }\n        setEmptyGridCells(emptyCells);\n    }, [\n        cards,\n        currentLayout,\n        mounted\n    ]);\n    // Use fallback values to ensure GridLayout always receives valid props\n    const safeGridWidth = gridDimensions.width || 1;\n    const safeCellSize = cellSize || 1;\n    if (!mounted) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"w-full h-96 bg-gray-100 rounded-lg animate-pulse flex items-center justify-center\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-gray-400\",\n                children: \"Loading grid...\"\n            }, void 0, false, {\n                fileName: \"/Users/dejonghe/Desktop/MosaLink-bolt/src/components/BentoGrid.tsx\",\n                lineNumber: 360,\n                columnNumber: 9\n            }, undefined)\n        }, void 0, false, {\n            fileName: \"/Users/dejonghe/Desktop/MosaLink-bolt/src/components/BentoGrid.tsx\",\n            lineNumber: 359,\n            columnNumber: 7\n        }, undefined);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: gridRef,\n        className: \"relative touch-none \".concat(className),\n        style: {\n            height: gridHeight,\n            minHeight: \"300px\",\n            position: \"relative\"\n        },\n        children: isPreview ? // Preview mode - static grid\n        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            style: {\n                display: \"grid\",\n                gridTemplateColumns: \"repeat(\".concat(getGridColumns(), \", 1fr)\"),\n                gridTemplateRows: \"repeat(\".concat(getGridRows(), \", 1fr)\"),\n                gap: \"\".concat(getGap(), \"px\"),\n                height: \"100%\",\n                width: \"100%\"\n            },\n            children: cards.map((card)=>{\n                if (!card.gridPosition) return null;\n                // Get grid span\n                const { colSpan, rowSpan } = getCardSize(card);\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    style: {\n                        gridColumn: \"\".concat(card.gridPosition.col + 1, \" / span \").concat(colSpan),\n                        gridRow: \"\".concat(card.gridPosition.row + 1, \" / span \").concat(rowSpan),\n                        position: \"relative\"\n                    },\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_BentoCardComponent__WEBPACK_IMPORTED_MODULE_3__.BentoCardComponent, {\n                        card: card,\n                        isPreviewMode: true\n                    }, void 0, false, {\n                        fileName: \"/Users/dejonghe/Desktop/MosaLink-bolt/src/components/BentoGrid.tsx\",\n                        lineNumber: 402,\n                        columnNumber: 17\n                    }, undefined)\n                }, card.id, false, {\n                    fileName: \"/Users/dejonghe/Desktop/MosaLink-bolt/src/components/BentoGrid.tsx\",\n                    lineNumber: 394,\n                    columnNumber: 15\n                }, undefined);\n            })\n        }, void 0, false, {\n            fileName: \"/Users/dejonghe/Desktop/MosaLink-bolt/src/components/BentoGrid.tsx\",\n            lineNumber: 377,\n            columnNumber: 9\n        }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((react_grid_layout__WEBPACK_IMPORTED_MODULE_4___default()), {\n                    className: \"layout\",\n                    layout: getLayoutItems(),\n                    cols: getGridColumns(),\n                    rowHeight: safeCellSize,\n                    width: safeGridWidth,\n                    margin: [\n                        getGap(),\n                        getGap()\n                    ],\n                    containerPadding: [\n                        0,\n                        0\n                    ],\n                    onLayoutChange: handleLayoutChange,\n                    isDraggable: !isPreview && currentLayout === \"desktop\",\n                    isResizable: false,\n                    compactType: null,\n                    preventCollision: true,\n                    useCSSTransforms: true,\n                    draggableHandle: \".drag-handle\",\n                    maxRows: getGridRows(),\n                    resizeHandles: [],\n                    children: cards.map((card)=>{\n                        if (!card.gridPosition) return null;\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"h-full w-full\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ResizableCard__WEBPACK_IMPORTED_MODULE_6__.ResizableCard, {\n                                card: card,\n                                cellSize: safeCellSize,\n                                gap: getGap(),\n                                maxCols: getGridColumns(),\n                                maxRows: getGridRows(),\n                                onIntelligentResize: handleIntelligentResize,\n                                onEdit: ()=>onCardClick && onCardClick(card.id)\n                            }, void 0, false, {\n                                fileName: \"/Users/dejonghe/Desktop/MosaLink-bolt/src/components/BentoGrid.tsx\",\n                                lineNumber: 435,\n                                columnNumber: 19\n                            }, undefined)\n                        }, card.id, false, {\n                            fileName: \"/Users/dejonghe/Desktop/MosaLink-bolt/src/components/BentoGrid.tsx\",\n                            lineNumber: 434,\n                            columnNumber: 17\n                        }, undefined);\n                    })\n                }, void 0, false, {\n                    fileName: \"/Users/dejonghe/Desktop/MosaLink-bolt/src/components/BentoGrid.tsx\",\n                    lineNumber: 412,\n                    columnNumber: 11\n                }, undefined),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"absolute inset-0 pointer-events-none\",\n                    style: {\n                        display: \"grid\",\n                        gridTemplateColumns: \"repeat(\".concat(getGridColumns(), \", 1fr)\"),\n                        gridTemplateRows: \"repeat(\".concat(getGridRows(), \", 1fr)\"),\n                        gap: \"\".concat(getGap(), \"px\"),\n                        zIndex: 5\n                    },\n                    children: emptyGridCells.map((param)=>{\n                        let { row, col } = param;\n                        const isHovered = (hoveredCell === null || hoveredCell === void 0 ? void 0 : hoveredCell.row) === row && (hoveredCell === null || hoveredCell === void 0 ? void 0 : hoveredCell.col) === col;\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                gridColumn: col + 1,\n                                gridRow: row + 1,\n                                position: \"relative\"\n                            },\n                            className: \"cursor-pointer pointer-events-auto\",\n                            onMouseEnter: ()=>setHoveredCell({\n                                    row,\n                                    col\n                                }),\n                            onMouseLeave: ()=>setHoveredCell(null),\n                            onClick: ()=>handleAddCard(row, col),\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_7__.motion.div, {\n                                initial: {\n                                    opacity: 0\n                                },\n                                animate: {\n                                    opacity: isHovered ? 1 : 0,\n                                    scale: isHovered ? 1 : 0.8\n                                },\n                                className: \"absolute inset-0 rounded-lg border-2 border-dashed border-indigo-500/40 bg-indigo-500/10 flex items-center justify-center\",\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_7__.motion.div, {\n                                    whileHover: {\n                                        scale: 1.1\n                                    },\n                                    whileTap: {\n                                        scale: 0.9\n                                    },\n                                    className: \"p-2 rounded-full \".concat(canAddMoreCards() ? \"bg-indigo-500 text-white\" : \"bg-red-500 text-white\"),\n                                    children: canAddMoreCards() ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Crown_Plus_lucide_react__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                                        size: 16\n                                    }, void 0, false, {\n                                        fileName: \"/Users/dejonghe/Desktop/MosaLink-bolt/src/components/BentoGrid.tsx\",\n                                        lineNumber: 495,\n                                        columnNumber: 25\n                                    }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_Crown_Plus_lucide_react__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                                        size: 16\n                                    }, void 0, false, {\n                                        fileName: \"/Users/dejonghe/Desktop/MosaLink-bolt/src/components/BentoGrid.tsx\",\n                                        lineNumber: 497,\n                                        columnNumber: 25\n                                    }, undefined)\n                                }, void 0, false, {\n                                    fileName: \"/Users/dejonghe/Desktop/MosaLink-bolt/src/components/BentoGrid.tsx\",\n                                    lineNumber: 485,\n                                    columnNumber: 21\n                                }, undefined)\n                            }, void 0, false, {\n                                fileName: \"/Users/dejonghe/Desktop/MosaLink-bolt/src/components/BentoGrid.tsx\",\n                                lineNumber: 477,\n                                columnNumber: 19\n                            }, undefined)\n                        }, \"cell-\".concat(row, \"-\").concat(col), false, {\n                            fileName: \"/Users/dejonghe/Desktop/MosaLink-bolt/src/components/BentoGrid.tsx\",\n                            lineNumber: 464,\n                            columnNumber: 17\n                        }, undefined);\n                    })\n                }, void 0, false, {\n                    fileName: \"/Users/dejonghe/Desktop/MosaLink-bolt/src/components/BentoGrid.tsx\",\n                    lineNumber: 450,\n                    columnNumber: 11\n                }, undefined)\n            ]\n        }, void 0, true)\n    }, void 0, false, {\n        fileName: \"/Users/dejonghe/Desktop/MosaLink-bolt/src/components/BentoGrid.tsx\",\n        lineNumber: 366,\n        columnNumber: 5\n    }, undefined);\n};\n_s(BentoGrid, \"s7/xGUKjl5RzpRMxEcelZleSZs0=\", false, function() {\n    return [\n        _store_useStore__WEBPACK_IMPORTED_MODULE_2__.useStore\n    ];\n});\n_c = BentoGrid;\n/* harmony default export */ __webpack_exports__[\"default\"] = (BentoGrid);\nvar _c;\n$RefreshReg$(_c, \"BentoGrid\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/BentoGrid.tsx\n"));

/***/ })

});